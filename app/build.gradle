apply plugin: 'com.android.application'

apply from: "${project.rootDir}/sign.properties"


Properties buildProps = new Properties();
buildProps.load(new FileInputStream(file(rootProject.file("version.properties"))))

Properties buildProps2 = new Properties();
buildProps2.load(new FileInputStream(file(rootProject.file("config.properties"))))

android {
    compileSdkVersion configs.compileSdkVersion
    buildToolsVersion configs.buildToolsVersion

    defaultConfig {

        minSdkVersion configs.minSdkVersion
        targetSdkVersion configs.targetSdkVersion
        applicationId configs.applicationId
        versionCode Integer.parseInt(buildProps["versionCode"])
        versionName String.valueOf(buildProps["versionName"])

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        imrelease {
            keyAlias project.ext.KEY_ALIS
            keyPassword project.ext.KEY_PASSWORD
            storeFile file(project.ext.STORE_FILE)
            storePassword project.ext.STORE_PASSWORD
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            signingConfig signingConfigs.imrelease
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            manifestPlaceholders = [
                    TIPS_PKGNAME     : configs.applicationId,
                    BAIDU_MAP_API_KEY: String.valueOf(buildProps2["baiduApiKey"])
            ]
            debuggable true
        }
        debug {
            minifyEnabled false
            signingConfig signingConfigs.imrelease
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])

    implementation "androidx.appcompat:appcompat:$rootProject.ext.androidx_appcompat"
    implementation "androidx.constraintlayout:constraintlayout:$rootProject.ext.androidx_constraintlayout_version"
    implementation "androidx.legacy:legacy-support-v4:$rootProject.ext.androidx_legacy_version"

    testImplementation "junit:junit:$rootProject.ext.junit_version"

    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

    implementation "com.google.android.material:material:$rootProject.ext.androidx_material_version"

    //butterKnife
    implementation "com.jakewharton:butterknife:$rootProject.ext.butter_knife_version"
    annotationProcessor "com.jakewharton:butterknife-compiler:$rootProject.ext.butter_knife_version"

    /* 定位SDK:全量定位
       地图SDK: 步骑行导航(含基础地图(含室内地图)， 检索
      )*/
    implementation files('libs/BaiduLBS_Android.jar')


    implementation 'com.orhanobut:logger:1.8'

    implementation 'com.github.FreedsXing:FreedsUtil:1.1.0'

    implementation 'org.litepal.guolindev:core:3.2.3'
}


this.getParentProject()
def getParentProject() {
    def name = this.getParent().name
    println "this parent project name is: ${name}"
}

this.getRootPro()
def getRootPro() {
    def name = this.getRootProject().name
    println "this root project name is: ${name}"
    println "this is version = " + this.getGradle().gradleVersion
}
